/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: MULTIQC {
        ext.args = { params.multiqc_title ? "--title \"${params.multiqc_title}\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SAMTOOLS_SORT {
        ext.args = '-n'
        ext.prefix = { "${meta.id}" }
    }


    withName: SAMTOOLS_FASTQ {
        ext.args = {
            [
                '-T "*"'
            ].join(' ')
        }
        ext.prefix = { "${meta.id}_${meta.method}" }
    }

    withName: SAMTOOLS_IMPORT {
        ext.args = {
            [
                '-T "*"',
                '--output-fmt bam',
            ].join(' ')
        }
        ext.prefix = { "${meta.id}_after_trim" }
    }

    withName: PORECHOP_PORECHOP {
        ext.args = {
            [
                '--discard_middle',
                '--extra_end_trim 10',
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: MODKIT_REPAIR {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/repair" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: DORADO_ALIGNER {
        ext.args = {
            [
                '--emit-summary',
                "--output-dir ${meta.id}",
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SAMTOOLS_FLAGSTAT {
        ext.prefix = { "${meta.id}_${meta.method}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment/flagstat" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: MODKIT_PILEUP {
        ext.args = {
            [
                '--combine-mods',
                '--motif A 0 --motif CHH 0 --motif CHG 0 --motif CG 0',
                "--log-filepath ${meta.id}_pileup.log",
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename == 'versions.yml') {
                    return null
                }
                if (filename.endsWith('.bed')) {
                    return null
                }
                return filename
            },
        ]
    }

    withName: PIGZ_COMPRESS {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    // For Pacbio

    withName: PACBIO_MINIMAP2_ALIGN {
        ext.args = {
            [
                '-y -Y', // -y: Copy input FASTA/Q comments to output.
                '-x map-hifi',
                '--secondary=no',
            ].join(' ')
        }
        ext.args4 = {
            [
                '-T "*"'
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    // minimap2 for ONT
    withName: ONT_MINIMAP2_ALIGN {
        ext.args = {
            [
                '-y -Y', // -y: Copy input FASTA/Q comments to output.
                '-x lr:hq',
                '--secondary=no',
            ].join(' ')
        }
        ext.args4 = {
            [
                '-T "*"'
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: PBMM2_ALIGN {
        ext.args = {
            [
                '--sort',
                '--preset HiFi',
            ].join(' ')
        }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: PB_CPG_TOOLS {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: PBCPG_BEDGRAPHS {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/bedgraphs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: MODKIT_BEDGRAPH {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/bedgraphs" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: FASTQC {
        ext.args = {
            [
                '--format bam'
            ].join(' ')
        }
        ext.prefix = { "${meta.id}_${meta.method}" }
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
