/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName : 'SAMTOOLS_SORT' {
        ext.args = { [                                                       
            '-n'               //  Sort by read name 
        ].join(' ') }
        ext.prefix = { "${meta.id}" } 
    }


    withName : 'SAMTOOLS_FASTQ' {
        ext.args = { [                                                       
            '-T "*"',               // Copy all tags over (important for MM/ML tags) 
            '-c 9',                 // compress to max level 
        ].join(' ') }
        ext.prefix = { "${meta.id}" } 
    }

    withName : 'SAMTOOLS_IMPORT' {
        ext.args = { [                                                       
            '-T "*"',               // Copy all tags over (important for MM/ML tags)
            '--output-fmt bam'      // Specify output to bam 
        ].join(' ') }
        ext.prefix = { "${meta.id}_after_trim" } 
    }

    // Define publish directory and arguments required for each processor 

    withName : 'PORECHOP_PORECHOP' {
        ext.args = { [                                                       
            '--no_split'               // Do not split 
        ].join(' ') }
        ext.prefix = { "${meta.id}" } 
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/trim" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'MODKIT_REPAIR' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/repair" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'DORADO_ALIGNER' {
        ext.args = { [                                                       
            '--emit-summary',               // Emit aligning summary
            "--output-dir ${meta.id}"       // Required when --emit-summary is set  
        ].join(' ') }
        ext.prefix = { "${meta.id}" } 
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment/flagstat" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }
    //
    withName: 'MODKIT_PILEUP' {
        ext.args = {[
            '--combine-mods',                                         // Combine base modification calls
            '--motif A 0 --motif CHH 0 --motif CHG 0 --motif CG 0',   // Extract methylation from all 4 mods
            "--log-filepath ${meta.id}_pileup.log"  // Include log file
        ]
        
        .join(' ') }
                     
        ext.prefix = { "${meta.id}" } 
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }



// For Pacbio 

    withName : 'MINIMAP2' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'PBMM2_ALIGN' {
        ext.args = { [                                                       
            '--sort',               // Sort output 
            '--preset HiFi',        // preset for HiFi PacBio reads
        ].join(' ') }
        ext.prefix = { "${meta.id}" } 
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'PB_CPG_TOOLS' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/pileup" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'PBCPG_BEDGRAPHS' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/bedgraphs" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }

    withName : 'MODKIT_BEDGRAPH' {
        publishDir = [
            path: { "${params.outdir}/${meta.method}/${meta.id}/bedgraphs" },
            mode: params.publish_dir_mode,
            saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1) }
        ]
    }


}
